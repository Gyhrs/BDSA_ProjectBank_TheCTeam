using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Microsoft.Identity.Web.Resource;
using MyApp.Shared;

namespace MyApp.Server.Controllers;

[Authorize]
[ApiController] // Indicates that this is used to serve HTTP API responses.
[Route("api/[controller]")] // Convention which means the route (web url) will be whatever comes before Controller, in this case, Projects (ProjectsController)
[RequiredScope(RequiredScopesConfigurationKey = "AzureAd:Scopes")]
public class ProjectsController : ControllerBase // Inherits from ControllerBase. Controllerbase does not have view support (from MVC). If we want view support we can inherit from Controller. Controllerbase has http codes Ok = 200, etc.
{
    // Dependency injection
    private readonly ILogger<ProjectsController> _logger;
    private readonly IProjectRepository _repository;

    public ProjectsController(ILogger<ProjectsController> logger, IProjectRepository repository)
    {
        _logger = logger;
        _repository = repository;
    }

    // Get all projects from DB
    [AllowAnonymous]
    // This attribute below produces more descriptive response details for web API help pages generated by tools like Swagger.
    [ProducesResponseType(StatusCodes.Status200OK)] // Here the ActionResultType is inferred from the T in ActionResult<T>. This is an advantage over using IActionResult which is another option.
    [HttpGet] // Lets the web API know this is a get method. I.e we want to use the HTTP request method "get"
    // ActionResults represent various HTTP status codes. 
    // ControllerBase has "convenience methods" like Ok(), BadRequest(), etc. which is a shorthand for return new BadRequestResult();


    // C# doesn't support implicit cast operators on interfaces. Consequently, conversion of the interface to a concrete type is
    // necessary to use ActionResult<T>. 
    public async Task<ActionResult<IReadOnlyCollection<ProjectDTO>>> GetAll()
    {
        var projects = await _repository.GetAllProjects();
        return Ok(projects); // Before ASP.NET Core 2.1, the return product; line had to be return Ok(product). 
                             // Documentation claims ActionResult<> cannot contain an interace like here, so this might not work

        /*
        if (!_repository.TryGetProduct(id, out var product))
        {
            return NotFound();
        }
        return Ok(product);
        */
    }

    // Get project from projectID from DB
    [AllowAnonymous]
    [ProducesResponseType(StatusCodes.Status404NotFound)]
    [ProducesResponseType(StatusCodes.Status400BadRequest)]
    [ProducesResponseType(StatusCodes.Status200OK)]
    [HttpGet("id/{id}")]
    public async Task<ActionResult<ProjectDTO>> GetFromId(int id)
    {
        if (id < 0)
        {
            return BadRequest("ids can't be negative");
        }

        var project = await _repository.GetProjectFromID(id);

        if (project == null)
        {
            return NotFound("No Project with specified id");
        }

        return Ok(project);
    }

    // Get projects from Name from DB
    [AllowAnonymous]
    [ProducesResponseType(StatusCodes.Status404NotFound)]
    [ProducesResponseType(StatusCodes.Status400BadRequest)]
    [ProducesResponseType(StatusCodes.Status200OK)]
    [HttpGet("name/{name}")]
    public async Task<ActionResult<IReadOnlyCollection<ProjectDTO>>> GetFromName(string name)
    {
        if (name.Length == 0 || name == null)
        {
            return BadRequest("No name provided");
        }

        var projects = await _repository.GetProjectsFromName(name);

        if (projects.Count == 0)
        {
            return NotFound("No Project with specified name");
        }
        return Ok(projects);
    }

    [AllowAnonymous]
    [ProducesResponseType(404)]
    [ProducesResponseType(400)]
    [ProducesResponseType(typeof(ProjectDTO), 200)]
    [HttpGet("tags/{tags}")]
    public async Task<ActionResult<IReadOnlyCollection<ProjectDTO>>> GetFromTags(string tags)
    {
        var watch = System.Diagnostics.Stopwatch.StartNew();

        string[] tagList = tags.Split("_");
        if (tagList.Length == 0 || (tagList.Length == 1 && tagList.ElementAt(0) == ""))
        {
            return BadRequest("No tags provided");
        }

        var projects = await _repository.GetProjectsFromTags(tagList.ToList());

        if (projects.Count == 0)
        {
            //FIXME: Apparently returning not found, results in exception in ProjectFeed.razor :(
            //return NotFound("No Project with specified tags");
        }
        watch.Stop();
        Console.ForegroundColor = ConsoleColor.Red;
        Console.WriteLine("---- GetFromTags (ProjectsController) ended in: " + watch.ElapsedMilliseconds + " ms ----");
        Console.ForegroundColor = ConsoleColor.White;
        return Ok(projects);
    }

    [AllowAnonymous]
    [ProducesResponseType(404)]
    [ProducesResponseType(400)]
    [ProducesResponseType(typeof(ProjectDTO), 200)]
    [HttpGet("tags/{tags}/{name}")]
    public async Task<ActionResult<IReadOnlyCollection<ProjectDTO>>> GetFromTagsAndTitle(string tags, string name)
    {
        string[] tagList = tags.Split("_");
        if (tagList.Length == 0 || (tagList.Length == 1 && tagList.ElementAt(0) == "")
            || name.Length == 0 || name == null)
        {
            return BadRequest("No tags / title provided");
        }

        var projects = await _repository.GetProjectsFromTagsAndName(tagList.ToList(), name);

        if (projects.Count == 0)
        {
            return NotFound("No Project with specified tags");
        }
        return Ok(projects);
    }
}