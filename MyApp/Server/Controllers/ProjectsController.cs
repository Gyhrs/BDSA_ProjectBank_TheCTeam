namespace MyApp.Server.Controllers;

[Authorize]
[ApiController] // Indicates that this is used to serve HTTP API responses.
[Route("api/[controller]")] // Convention which means the route (web url) will be whatever comes before Controller, in this case, Projects (ProjectsController)
[RequiredScope(RequiredScopesConfigurationKey = "AzureAd:Scopes")]
public class ProjectsController : ControllerBase 
{
    // Dependency injection
    private readonly ILogger<ProjectsController> _logger;
    private readonly IProjectRepository _repository;

    public ProjectsController(ILogger<ProjectsController> logger, IProjectRepository repository)
    {
        _logger = logger;
        _repository = repository;
    }

    // Get all projects from DB
    [AllowAnonymous]
    // This attribute below produces more descriptive response details for web API help pages generated by tools like Swagger.
    [ProducesResponseType(StatusCodes.Status200OK)] 
    [HttpGet]
    public async Task<ActionResult<IReadOnlyCollection<ProjectDTO>>> GetAllAsync()
    {
        var projects = await _repository.GetAllProjectsAsync();
        return Ok(projects);
    }

    // Get project from projectID from DB
    [AllowAnonymous]
    [ProducesResponseType(StatusCodes.Status404NotFound)]
    [ProducesResponseType(StatusCodes.Status400BadRequest)]
    [ProducesResponseType(StatusCodes.Status200OK)]
    [HttpGet("id/{id}")]
    public async Task<ActionResult<ProjectDTO>> GetFromIdAsync(int id)
    {
        if (id < 0)
        {
            return BadRequest("ids can't be negative");
        }

        var project = await _repository.GetProjectFromIDAsync(id);

        if (project == null)
        {
            return NotFound("No Project with specified id");
        }

        return Ok(project);
    }

    // Get projects from Name from DB
    [AllowAnonymous]
    [ProducesResponseType(StatusCodes.Status404NotFound)]
    [ProducesResponseType(StatusCodes.Status400BadRequest)]
    [ProducesResponseType(StatusCodes.Status200OK)]
    [HttpGet("name/{name}")]
    public async Task<ActionResult<IReadOnlyCollection<ProjectDTO>>> GetFromNameAsync(string name)
    {
        if (name.Length == 0 || name == null)
        {
            return BadRequest("No name provided");
        }

        var projects = await _repository.GetProjectsFromNameAsync(name);

        if (projects.Count == 0)
        {
            return NotFound("No Project with specified name");
        }
        return Ok(projects);
    }

    [AllowAnonymous]
    [ProducesResponseType(StatusCodes.Status404NotFound)]
    [ProducesResponseType(StatusCodes.Status400BadRequest)]
    [ProducesResponseType(typeof(ProjectDTO), StatusCodes.Status200OK)]
    [HttpGet("tags/{tags}")]
    public async Task<ActionResult<IReadOnlyCollection<ProjectDTO>>> GetFromTagsAsync(string tags)
    {
        string[] tagList = tags.Split("_");
        if (tagList.Length == 0 || (tagList.Length == 1 && tagList.ElementAt(0) == ""))
        {
            return BadRequest("No tags provided");
        }

        var projects = await _repository.GetProjectsFromTagsAsync(tagList.ToList());

        if (projects.Count == 0)
        {
            return NotFound("No Project with specified tags");
        }

        return Ok(projects);
    }

    [AllowAnonymous]
    [ProducesResponseType(StatusCodes.Status404NotFound)]
    [ProducesResponseType(StatusCodes.Status400BadRequest)]
    [ProducesResponseType(typeof(ProjectDTO), StatusCodes.Status200OK)]
    [HttpGet("tags/{tags}/{name}")]
    public async Task<ActionResult<IReadOnlyCollection<ProjectDTO>>> GetFromTagsAndTitleAsync(string tags, string name)
    {
        string[] tagList = tags.Split("_");
        if (tagList.Length == 0 || (tagList.Length == 1 && tagList.ElementAt(0) == "")
            || name.Length == 0 || name == null)
        {
            return BadRequest("No tags / title provided");
        }

        var projects = await _repository.GetProjectsFromTagsAndNameAsync(tagList.ToList(), name);

        if (projects.Count == 0)
        {
            return NotFound("No Project with specified tags");
        }
        return Ok(projects);
    }

    [Authorize]
    [ProducesResponseType(StatusCodes.Status400BadRequest)]
    [ProducesResponseType(409)]
    [ProducesResponseType(typeof(ProjectDTO), StatusCodes.Status201Created)]
    [HttpPost]
    public async Task<ActionResult<ProjectDTO>> CreateProjectAsync(ProjectCreateDTO inputProject)
    {
        if (inputProject.Name.Length == 0
        || inputProject.StartDate == null
        || inputProject.EndDate == null
        || inputProject.Description.Length == 0)
        {
            return BadRequest("Not correct input");
        }

        var (statuscode, created) = await _repository.CreateProjectAsync(inputProject);

        switch (statuscode)
        {
            case Status.Conflict:
                return Conflict(created);
            case Status.Created:
                return Created(new Uri("/api/Projects", UriKind.Relative), created); //CreatedAtAction(nameof(GetFromId), new {created.Id}, created);
            default:
                return BadRequest();
        }
    }

    [Authorize]
    [ProducesResponseType(StatusCodes.Status400BadRequest)]
    [ProducesResponseType(StatusCodes.Status404NotFound)]
    [ProducesResponseType(StatusCodes.Status200OK)]
    [HttpPut("id/{id}")]
    public async Task<ActionResult<ProjectDTO>> UpdateProjectAsync(int id, [FromBody] ProjectUpdateDTO inputProject)
    {
        if (inputProject.Name.Length == 0
        || inputProject.StartDate == null
        || inputProject.EndDate == null
        || inputProject.Description.Length == 0)
        {
            return BadRequest("Not correct input");
        }

        var status = await _repository.UpdateProjectAsync(inputProject.Id, inputProject);

        switch (status)
        {
            case Status.NotFound:
                return NotFound("Project not found");
            case Status.Updated:
                return Ok();
            default:
                return BadRequest();
        }
    }

    [Authorize]
    [ProducesResponseType(StatusCodes.Status404NotFound)]
    [ProducesResponseType(StatusCodes.Status200OK)]
    [HttpDelete("id/{id}")]
    public async Task<ActionResult<ProjectDTO>> DeleteAsync(int id)
    {
        var status = await _repository.DeleteProjectAsync(id);

        if (status == Status.NotFound)
        {
            return NotFound("The project wasnt found");
        }
        else
        {
            return Ok();
        }
    }
}