@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using MyApp.Shared
@attribute [Authorize]
@inject HttpClient Http

<div class="tag-row">
    <div class="colum-container">
        <h6>Settings:</h6>
        <hr class="line" />
        <button class="button-like">Clear All</button>
    </div>

    <div class="colum-container">
        <h6 id="invisible">Hej ehj</h6>
        <hr class="invisible-line" id="invisible" />
        <button class="button-like" id="round-bnt"
            onclick="document.getElementById('tagbar').scrollLeft -= 40 ({behavior:'smooth'})"> ⮜ </button>
    </div>

    <div class="colum-container">
        <h6>Tags:</h6>
        <hr class="line" style="background-color: #47abb9;" />
        <div class="scrollable" id="tagbar">
            @if (_tags != null)
            {
                @foreach (var tag in _tags)
                {
                    <button class="button-like" @onclick="() => onTagButtonClicked(tag.Name)">@tag.Name</button>
                    //<button class="button-like" onclick="@tag.Name">@tag.Name</button>

                    //<button class="button-like">@tag.Name</button>
                }
            }
        </div>
    </div>

    <div class="colum-container">
        <h6 id="invisible">Settings:</h6>
        <hr class="invisible-line" id="invisible" />
        <button class="button-like" id="round-bnt"
            onclick="document.getElementById('tagbar').scrollLeft += 40 ({behavior:'smooth'})"> ⮞
        </button>
    </div>

    <!-- <p>@scrollvalue</p> -->
</div>

<ProjectFeed @ref="_projectFeed"></ProjectFeed>



@code {
    public int scrollvalue { get; set; } = 0;
    private TagDTO[]? _tags;
    private ProjectFeed _projectFeed;
    private IDictionary<string, bool> activeTags = new Dictionary<string, bool>();
    private void ScrollLeft()
    {
        scrollvalue += 20;
    }

    private void ScrollRight()
    {
        scrollvalue -= 20;
    }

    private async Task onTagButtonClicked(string tag) {
        System.Console.WriteLine("Tag has been pressed: " + tag);

        activeTags.Add(tag, true);


        await _projectFeed.setProjectsFromTag(tag);
        _projectFeed.Refresh();
    }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            _tags = await Http.GetFromJsonAsync<TagDTO[]>("api/Tags");
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
    }
}