@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using MyApp.Shared
@attribute [Authorize]
@inject HttpClient Http

<div class="tag-row">
    <div class="colum-container">
        <h6>Settings:</h6>
        <hr class="line" />
        <button class="button-like">Clear All</button>
    </div>

    <div class="colum-container">
        <h6 id="invisible">Hej ehj</h6>
        <hr class="invisible-line" id="invisible" />
        <button class="button-like" id="round-bnt" onclick="document.getElementById('tagbar').scrollLeft -= 40"> ⮜
        </button>
    </div>

    <div class="colum-container">
        <h6>Tags:</h6>
        <hr class="line" style="background-color: #47abb9;" />
        <div class="scrollable" id="tagbar">
            @if (_tags != null)
            {
                @foreach (var tag in _tags)
                {
                    <button class="button-like" @onclick="() => onTagButtonClicked(tag.Name)">@tag.Name</button>
                }
            }
        </div>
    </div>

    <div class="colum-container">
        <h6 id="invisible">filling</h6>
        <hr class="invisible-line" id="invisible" />
        <button class="button-like" id="round-bnt" onclick="document.getElementById('tagbar').scrollLeft += 40"> ⮞
        </button>
    </div>

    <div class="colum-container">
        <h6 id="invisible">filling</h6>
        <hr class="invisible-line" id="invisible" />
        <SearchBar @ref="_searchBar" parentSearch="SearchAsync"></SearchBar>
    </div>

    <p>@test</p>

</div>

<ProjectFeed @ref="_projectFeed"></ProjectFeed>



@code {
    public int scrollvalue { get; set; } = 0;
    private TagDTO[]? _tags;
    private ProjectFeed _projectFeed;

    private SearchBar _searchBar;
    private IDictionary<string, bool> activeTags = new Dictionary<string, bool>();

    private String test;

    private async Task onTagButtonClicked(string tag)
    {
        System.Console.WriteLine("Tag has been pressed: " + tag);

        activeTags[tag] = !activeTags[tag];

        SearchAsync();
        _projectFeed.Refresh();
    }

    public string GetSearchTags()
    {
        return string.Join("_", activeTags.Where(t => t.Value).Select(t => t.Key).ToList());

    }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            _tags = await Http.GetFromJsonAsync<TagDTO[]>("api/Tags");

            foreach (var t in _tags)
            {
                activeTags.Add(t.Name, false);
            }
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
    }

    public async void SearchAsync()
    {
        var searchName = _searchBar._searchString;
        var activeTags = GetSearchTags();

        if (searchName.Length == 0)
        {
            // SearchName is empty but tags isnt - search only on tags
            if (activeTags.Length != 0)
            {
                await _projectFeed.setProjectsFromTag(activeTags);
            }
            else
            {
                await _projectFeed.GetAllProjects();
            }
        }
        else
        {
            // SearchName and tags are not empty - search on both
            if (activeTags.Length != 0)
            {
                await _projectFeed.setProjectsFromTagsAndString(activeTags + "/" + searchName);
            }
            else // SearchName isnt empty, but tags are - search only on searchname
            {
                await _projectFeed.setProjectsFromSearchString(searchName);
            }
        }
        _projectFeed.Refresh();
    }
}