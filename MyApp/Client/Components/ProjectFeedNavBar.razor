@attribute [Authorize]
@inject HttpClient Http

<div class="tag-row">
    <div class="colum-container">
        <!-- this NOT in mobile-friendly layout -->
        <div class="desktop-only">
            <h6>Settings:</h6>
            <hr class="line" />
            <button class="button-like" @onclick="() => onClearAllButtonClicked()">Clear</button>
        </div>

        <!-- this IS ONLY in mobile-friendly layout -->
        <div class="cross-screen" id="upper-mobile-nav-bar">
            <button class="button-like" @onclick="() => onClearAllButtonClicked()">Clear</button>
            <SearchBar @ref="_mobileSearchBar" parentSearch="SearchAsync"></SearchBar>
        </div>
    </div>

    <!-- this NOT in mobile-friendly layout -->
    <div class="desktop-only colum-container" id="scroll-bnt-div">
        <div style="height: 28px;"></div>
        <button class="button-like" id="round-bnt" onclick="document.getElementById('tagbar').scrollLeft -= 40"> ⮜
        </button>
    </div>

    <div class="colum-container">
        <h6 class="desktop-only">Tags:</h6>
        <hr class="desktop-only line" style="background-color: #47abb9; width: 100%" />
        <div class="scrollable" id="tagbar">
            @if (_tags != null)
            {
                @foreach (var tag in _tags)
                {
                    @if ((activeTags[tag.Name]))
                    {
                        <button class="button-like" style="background-color: #43b4f3; color: white"
                @onclick="() => onTagButtonClicked(tag.Name)">@tag.Name</button>
                    }
                }
                @foreach (var tag in _tags)
                {
                    @if (!(activeTags[tag.Name]))
                    {
                        <button class="button-like" style="background-color: none; color: black"
                @onclick="() => onTagButtonClicked(tag.Name)">@tag.Name</button>
                    }
                }
            }
        </div>
    </div>

    <!-- this NOT in mobile-friendly layout -->
    <div class="desktop-only colum-container" id="scroll-bnt-div">
        <div style="height: 28px;"></div>
        <button class="button-like" id="round-bnt" onclick="document.getElementById('tagbar').scrollLeft += 40">
            ⮞
        </button>
    </div>

    <!-- This NOT in mobile-friendly layout -->
    <div style="" class="desktop-only colum-container">
        <!--  -->
        <h6>Search:</h6>
        <hr class="line" />
        <SearchBar @ref="_desktopSearchBar" parentSearch="SearchAsync"></SearchBar>
    </div>

</div>
<div>
    <ProjectFeed @ref="_projectFeed"></ProjectFeed>
</div>

@code {
    private TagDTO[]? _tags;
    private ProjectFeed _projectFeed;
    private SearchBar _desktopSearchBar;
    private SearchBar _mobileSearchBar;
    private String? _lastSearchName;
    private IDictionary<string, bool> activeTags = new Dictionary<string, bool>();
    private async Task onTagButtonClicked(string tag)
    {
        activeTags[tag] = !activeTags[tag];

        SearchAsync();
        _projectFeed.Refresh();
    }
    private async Task onClearAllButtonClicked()
    {
        _projectFeed.ClearAllProjects();
        
        foreach (var t in _tags)
        {
            activeTags[t.Name] = false;
        }

        _desktopSearchBar._searchString = "";
        _mobileSearchBar._searchString = "";


        await _projectFeed.GetAllProjects();
        _projectFeed.Refresh();
    }
    public string GetSearchTags()
    {
        return string.Join("_", activeTags.Where(t => t.Value).Select(t => t.Key).ToList());
    }
    protected override async Task OnInitializedAsync()
    {
        try
        {
            _tags = await Http.GetFromJsonAsync<TagDTO[]>("api/Tags");

            foreach (var t in _tags)
            {
                activeTags.Add(t.Name, false);
            }
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
        catch (Exception exc) 
        {
            _projectFeed.ClearAllProjects();
        }
    }

    private String? getLastChangedSearchName()
    {
        var SearchName = _lastSearchName;

        if (_lastSearchName != _desktopSearchBar._searchString)
        {
            SearchName = _desktopSearchBar._searchString;

            _mobileSearchBar._searchString = _desktopSearchBar._searchString;
        }
        else if (_lastSearchName != _mobileSearchBar._searchString)
        {
            SearchName = _mobileSearchBar._searchString;
            _desktopSearchBar._searchString = _mobileSearchBar._searchString;
        }

        _lastSearchName = SearchName;

        return SearchName;
    }

    public async void SearchAsync()
    {
        var searchName = getLastChangedSearchName();
        var activeTags = GetSearchTags();


        if (searchName.Length == 0)
        {
            // SearchName is empty but tags isnt - search only on tags
            if (activeTags.Length != 0)
            {
                await _projectFeed.setProjectsFromTag(activeTags);
            }
            else
            {
                _projectFeed.ClearAllProjects();
                await _projectFeed.GetAllProjects();
            }
        }
        else
        {
            // SearchName and tags are not empty - search on both
            if (activeTags.Length != 0)
            {
                await _projectFeed.setProjectsFromTagsAndString(activeTags + "/" + searchName);
            }
            else // SearchName isnt empty, but tags are - search only on searchname
            {
                await _projectFeed.setProjectsFromSearchString(searchName);
            }
        }
        _projectFeed.Refresh();
    }
}