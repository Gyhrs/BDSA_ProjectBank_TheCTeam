@using System.Collections.Generic;
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using MyApp.Shared
@attribute [Authorize]
@inject HttpClient Http

<div class="project-feed">
    @if (_projects != null)
    {
        @if (_projects.Length == 0)
        {
            <p>No projects were found</p>
        }
        else
        {
            @foreach (var item in _projects)
            {
                <ProjectBox dto="item"></ProjectBox>
            }
        }
    }
    else
    {
        <LoadingScreen></LoadingScreen>
    }
</div>

@code {
    private ProjectDTO[]? _projects;

    protected override async Task OnInitializedAsync()
    {
        await GetAllProjects();
    }

    public async Task GetAllProjects()
    {
        try
        {
            _projects = await Http.GetFromJsonAsync<ProjectDTO[]>("api/Projects");
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
    }

    public async Task setProjectsFromTag(string tag)
    {
        if (tag.Length == 0)
        {
            GetAllProjects();
        }
        else
        {
            try
            {
                _projects = await Http.GetFromJsonAsync<ProjectDTO[]>("api/Projects/tags/" + tag);
            }
            catch (AccessTokenNotAvailableException exception)
            {
                exception.Redirect();
            }
            catch (Exception exception)
            {
                _projects = Array.Empty<ProjectDTO>();
            }
        }
    }

    public async Task setProjectsFromSearchString(string searchString)
    {
        try
        {
            _projects = await Http.GetFromJsonAsync<ProjectDTO[]>("api/Projects/name/" + searchString);
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
        catch (Exception exception)
        {
            _projects = Array.Empty<ProjectDTO>();
        }
    }

    public async Task setProjectsFromTagsAndString(string searchString)
    {
        try
        {
            _projects = await Http.GetFromJsonAsync<ProjectDTO[]>("api/Projects/tags/" + searchString);
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
        catch (Exception exception)
        {
            _projects = Array.Empty<ProjectDTO>();
        }
    }

    public void ClearAllProjects()
    {
        _projects = null;
        Refresh();
    }

    public void Refresh()
    {
        this.StateHasChanged();
    }
}